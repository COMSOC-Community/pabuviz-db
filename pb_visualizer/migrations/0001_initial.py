# Generated by Django 4.2.5 on 2023-09-12 16:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BallotType',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField()),
                ('order_priority', models.IntegerField()),
            ],
            options={
                'ordering': ['order_priority'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField(blank=True)),
                ('country', models.CharField(blank=True, max_length=500)),
                ('unit', models.CharField(blank=True, help_text='name of the municipality, region, organization, etc.', max_length=500, verbose_name='unit')),
                ('subunit', models.CharField(blank=True, help_text='name of the sub-jurisdiction', max_length=500, verbose_name='subunit')),
                ('instance', models.SlugField(blank=True, help_text='identifier from the organizers', max_length=100, verbose_name='instance')),
                ('budget', models.DecimalField(decimal_places=2, help_text='maximum budget to spend', max_digits=50, verbose_name='budget')),
                ('date_begin', models.DateField(blank=True, help_text='start date of the voting process', null=True, verbose_name='start date')),
                ('date_end', models.DateField(blank=True, help_text='end date of the voting process', null=True, verbose_name='end date')),
                ('language', models.CharField(blank=True, max_length=100)),
                ('edition', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(blank=True, max_length=100)),
                ('comment', models.TextField(blank=True)),
                ('num_projects', models.IntegerField(default=0, verbose_name='number of projects')),
                ('num_votes', models.IntegerField(default=0, verbose_name='number of votes')),
                ('has_categories', models.BooleanField(default=False, help_text='each project is assigned one or more project categories', verbose_name='project categories')),
                ('has_targets', models.BooleanField(default=False, help_text='each project is assigned one or more target groups', verbose_name='project target groups')),
                ('has_neighborhoods', models.BooleanField(default=False, help_text='the voters are divided into neighborhoods', verbose_name='neighbourhoods')),
                ('has_voting_methods', models.BooleanField(default=False, help_text='the voting method (e.g. online vote or in person) is recorded for each vote', verbose_name='voting methods')),
                ('is_trivial', models.BooleanField(default=False)),
                ('modification_date', models.DateField(auto_now=True)),
                ('file_path', models.CharField(blank=True, max_length=1000, null=True, unique=True)),
                ('file_size', models.FloatField(default=0)),
                ('ballot_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='pb_visualizer.ballottype')),
            ],
            options={
                'ordering': ['-date_begin', 'country', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='neighborhoods', to='pb_visualizer.election')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'election')},
            },
        ),
        migrations.CreateModel(
            name='PreferenceInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_strength', models.FloatField(default=1)),
            ],
            options={
                'ordering': ['-preference_strength'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField(help_text='project id specific to the election', max_length=1000, verbose_name='project id')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=50)),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField(default='')),
                ('categories', models.ManyToManyField(blank=True, related_name='projects', to='pb_visualizer.category')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='pb_visualizer.election')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('name', models.CharField(max_length=1000, unique=True)),
                ('abbreviation', models.SlugField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='abbreviation')),
                ('description', models.TextField(blank=True, verbose_name='')),
                ('order_priority', models.IntegerField(default=100)),
                ('applies_to', models.ManyToManyField(related_name='rules', to='pb_visualizer.ballottype')),
            ],
            options={
                'ordering': ['order_priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RuleFamily',
            fields=[
                ('name', models.CharField(max_length=1000, unique=True)),
                ('abbreviation', models.SlugField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='abbreviation')),
                ('description', models.TextField(blank=True, verbose_name='')),
                ('order_priority', models.IntegerField(default=100)),
            ],
            options={
                'ordering': ['order_priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RuleResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_results', to='pb_visualizer.election')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_results', to='pb_visualizer.rule')),
                ('selected_projects', models.ManyToManyField(related_name='rule_results_selected_by', to='pb_visualizer.project')),
            ],
            options={
                'ordering': ('election', 'rule'),
                'unique_together': {('election', 'rule')},
            },
        ),
        migrations.CreateModel(
            name='VotingMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voting_methods', to='pb_visualizer.election')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'election')},
            },
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voter_id', models.CharField(help_text='voter id specific to the election', max_length=1000, verbose_name='voter id')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'male'), ('Female', 'female'), ('Other', 'other')], max_length=100)),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voters', to='pb_visualizer.election')),
                ('neighborhood', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voters', to='pb_visualizer.neighborhood')),
                ('votes', models.ManyToManyField(related_name='voters', through='pb_visualizer.PreferenceInfo', to='pb_visualizer.project')),
                ('voting_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voters', to='pb_visualizer.votingmethod')),
            ],
            options={
                'unique_together': {('voter_id', 'election')},
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='pb_visualizer.election')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'election')},
            },
        ),
        migrations.CreateModel(
            name='RuleResultMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('short_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('inner_type', models.CharField(choices=[('int', 'integer'), ('float', 'float'), ('list[float]', 'list of floats')], max_length=50)),
                ('range', models.CharField(max_length=10)),
                ('order_priority', models.IntegerField()),
                ('applies_to', models.ManyToManyField(related_name='rule_result_metadata', to='pb_visualizer.ballottype')),
            ],
            options={
                'ordering': ['order_priority', 'name'],
            },
        ),
        migrations.AddField(
            model_name='rule',
            name='rule_family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elements', to='pb_visualizer.rulefamily'),
        ),
        migrations.AddField(
            model_name='project',
            name='targets',
            field=models.ManyToManyField(blank=True, related_name='projects', to='pb_visualizer.target'),
        ),
        migrations.AddField(
            model_name='preferenceinfo',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_infos', to='pb_visualizer.project'),
        ),
        migrations.AddField(
            model_name='preferenceinfo',
            name='voter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_infos', to='pb_visualizer.voter'),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log', models.TextField()),
                ('log_type', models.CharField(max_length=200)),
                ('log_num', models.IntegerField(default=0)),
                ('publication_date', models.DateTimeField()),
            ],
            options={
                'ordering': ['-publication_date'],
                'unique_together': {('log_type', 'log_num')},
            },
        ),
        migrations.CreateModel(
            name='ElectionMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('short_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('inner_type', models.CharField(choices=[('int', 'integer'), ('float', 'float'), ('list[float]', 'list of floats')], max_length=50)),
                ('order_priority', models.IntegerField()),
                ('applies_to', models.ManyToManyField(related_name='election_metadata', to='pb_visualizer.ballottype')),
            ],
            options={
                'ordering': ['order_priority', 'name'],
            },
        ),
        migrations.AddField(
            model_name='election',
            name='rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elections', to='pb_visualizer.rule'),
        ),
        migrations.AddField(
            model_name='category',
            name='election',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='pb_visualizer.election'),
        ),
        migrations.CreateModel(
            name='RuleResultDataProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=500)),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_properties', to='pb_visualizer.ruleresultmetadata')),
                ('rule_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_properties', to='pb_visualizer.ruleresult')),
            ],
            options={
                'ordering': ('metadata',),
                'unique_together': {('rule_result', 'metadata')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('project_id', 'election')},
        ),
        migrations.AlterUniqueTogether(
            name='preferenceinfo',
            unique_together={('voter', 'project')},
        ),
        migrations.CreateModel(
            name='ElectionDataProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_properties', to='pb_visualizer.election')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_properties', to='pb_visualizer.electionmetadata')),
            ],
            options={
                'ordering': ('metadata',),
                'unique_together': {('election', 'metadata')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('name', 'election')},
        ),
    ]
